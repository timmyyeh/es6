[
    {
        "id": 4103,
        "date": "2018-03-13T11:35:48",
        "date_gmt": "2018-03-13T15:35:48",
        "guid": {
            "rendered": "http://wesbos.com/?p=4103"
        },
        "modified": "2018-03-19T13:09:05",
        "modified_gmt": "2018-03-19T17:09:05",
        "slug": "react-context",
        "status": "publish",
        "type": "post",
        "link": "https://wesbos.com/react-context/",
        "title": {
            "rendered": "React&#8217;s New Context API Explained"
        },
        "content": {
            "rendered": "<p>Hey Folks! React 16.3 has a new Context API which makes accessing data and functions anywhere in your application a snap. If you ever find yourself passing data down via props 4-5 levels deep, context might be what you are looking for.</p>\n<p>Enjoy!</p>\n<p><span class=\"embed-youtube\" style=\"text-align:center; display: block;\"><iframe class='youtube-player' type='text/html' width='640' height='390' src='https://www.youtube.com/embed/XLJN4JfniH4?version=3&#038;rel=1&#038;fs=1&#038;autohide=2&#038;showsearch=0&#038;showinfo=1&#038;iv_load_policy=1&#038;wmode=transparent' allowfullscreen='true' style='border:0;'></iframe></span></p>\n<p>Code Examples available at https://github.com/wesbos/React-Context</p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Hey Folks! React 16.3 has a new Context API which makes accessing data and functions anywhere in your application a snap. If you ever find yourself passing data down via props 4-5 levels deep, context might be what you are &hellip; <a href=\"https://wesbos.com/react-context/\">Continue reading <span class=\"meta-nav\">&rarr;</span></a></p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 4104,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            44
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https://wesbos.com/wp-json/wp/v2/posts/4103"
                }
            ],
            "collection": [
                {
                    "href": "https://wesbos.com/wp-json/wp/v2/posts"
                }
            ],
            "about": [
                {
                    "href": "https://wesbos.com/wp-json/wp/v2/types/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https://wesbos.com/wp-json/wp/v2/users/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https://wesbos.com/wp-json/wp/v2/comments?post=4103"
                }
            ],
            "version-history": [
                {
                    "href": "https://wesbos.com/wp-json/wp/v2/posts/4103/revisions"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https://wesbos.com/wp-json/wp/v2/media/4104"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https://wesbos.com/wp-json/wp/v2/media?parent=4103"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https://wesbos.com/wp-json/wp/v2/categories?post=4103"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https://wesbos.com/wp-json/wp/v2/tags?post=4103"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https://api.w.org/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 4094,
        "date": "2018-02-28T10:40:28",
        "date_gmt": "2018-02-28T15:40:28",
        "guid": {
            "rendered": "http://wesbos.com/?p=4094"
        },
        "modified": "2018-02-28T11:32:38",
        "modified_gmt": "2018-02-28T16:32:38",
        "slug": "react-for-beginners-re-recorded-again",
        "status": "publish",
        "type": "post",
        "link": "https://wesbos.com/react-for-beginners-re-recorded-again/",
        "title": {
            "rendered": "React for Beginners Re-Recorded (again!)"
        },
        "content": {
            "rendered": "<p>Well well well! Today I am excited to announce that my <a href=\"https://reactforbeginners.com\">React for Beginners</a> course has been totally updated and re-recorded.</p>\n<p>The front end development landscape sure does change quickly and this is the third time I&#8217;ve re-recorded it to keep the course up-to-date with the latest in API changes and industry best practices.</p>\n<p>I initially launched this course in November 2015, and since then over 18,000 people have come along and learned React with me.</p>\n<p><strong>This is totally free update to everyone who has purchase the course. When you buy a course with me you don&#8217;t have to worry about the tech going out of date 🙂 </strong></p>\n<h3>What has changed?!!?!</h3>\n<p>In short &#8211; if you have already taken the course and feel comfortable with React, you likely won&#8217;t need to re-take it. We still build the same real-time Catch of the Day Fish Market application. The core concepts of React haven&#8217;t changed, but the syntax and many of the supporting packages have. If you feel like you need a re-fresher on React, or are still working through learning it, I&#8217;d say go ahead and take it again.</p>\n<p>The course is using React 16.3-Alpha, which should be 16.3 stable once it&#8217;s released. Here are some notes on what has changed since the last re-record:</p>\n<ul>\n<li>Use React 16.3</li>\n<li>Move to external PropTypes Package as React.PropTypes has been deprecated</li>\n<li>Add a few examples on shaping propTypes</li>\n<li>Use React&#8217;s new Refs API, remove function refs. Function refs aren&#8217;t going anywhere, but this new API us much easier to understand</li>\n<li>Remove all use of constructors and super() &#8211; use class properties instead</li>\n<li>Better explain binding, use of <code>this</code> and what component instances are</li>\n<li>Upgrade to React Router 4 Final API — the last version used a beta version of React Router used <code>&lt;Match&gt;</code> and stable finally used <code>&lt;Route&gt;</code> so it was just a rename of some variables</li>\n<li>Moved from <code>react-addons-css-transition-group</code> to <code>react-transition-group</code> for the super cool UI animations. Upgraded from 1.x to 2.x. </li>\n<li>Use official Firebase package for Authentication as re-base is now only for data binding</li>\n<li>Move promise based code to async/await</li>\n<li>Show how to return multiple elements with React.Fragment</li>\n<li>Added a destructuring example for stateless functional components </li>\n<li>Updated the Zeit Now Deployment video</li>\n<li>Added a video on deploying to Netlify </li>\n</ul>\n<h3>Advanced React</h3>\n<p>I&#8217;ve spend the last 3 weeks working on this re-record and now it&#8217;s time to focus my attention back on the Full Stack Advanced React and GraphQL course I&#8217;be been cooking up for the past bit. We&#8217;re going to touch on all kind of new, exciting and advanced concepts that are changing the way we build web app. Right now the app we are going to build is an online store with a real credit card checkout, cart and orders. The stack is currently GraphQL, Apollo, Express, Prisma, React, Styled Components and friends.</p>\n<p>I&#8217;m really excited for this one!</p>\n<h3>Sale</h3>\n<p>To celebrate I&#8217;ve put all my courses on sale! In addition to <a href=\"https://reactforbeginners.com\">React For Beginners</a>,  check out my recently updated to include ES7 and ES8, <a href=\"https://ES6.io\">ES6 for Everyone</a> and my <a href=\"https://LearnNode.com\">Learn Node</a> which uses 100% async+await and builds a really cool Express+MongoDB application.</p>\n<h3>Thanks</h3>\n<p>Thanks everyone &#8211; your support means the world to me &#8211; I can&#8217;t believe that I get to do this for a job!  Until next time 😘</p>\n<p>PS you should:</p>\n<ul>\n<li>Listen to my web development podcast — <a href=\"https://Syntax.fm\">Syntax.fm</a></li>\n<li><a href=\"https://instagram.com/wesbos\">Follow me on Instagram</a> for a mix of web development, BBQ and kids. </li>\n</ul>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Well well well! Today I am excited to announce that my React for Beginners course has been totally updated and re-recorded. The front end development landscape sure does change quickly and this is the third time I&#8217;ve re-recorded it to &hellip; <a href=\"https://wesbos.com/react-for-beginners-re-recorded-again/\">Continue reading <span class=\"meta-nav\">&rarr;</span></a></p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 4095,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            44
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https://wesbos.com/wp-json/wp/v2/posts/4094"
                }
            ],
            "collection": [
                {
                    "href": "https://wesbos.com/wp-json/wp/v2/posts"
                }
            ],
            "about": [
                {
                    "href": "https://wesbos.com/wp-json/wp/v2/types/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https://wesbos.com/wp-json/wp/v2/users/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https://wesbos.com/wp-json/wp/v2/comments?post=4094"
                }
            ],
            "version-history": [
                {
                    "href": "https://wesbos.com/wp-json/wp/v2/posts/4094/revisions"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https://wesbos.com/wp-json/wp/v2/media/4095"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https://wesbos.com/wp-json/wp/v2/media?parent=4094"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https://wesbos.com/wp-json/wp/v2/categories?post=4094"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https://wesbos.com/wp-json/wp/v2/tags?post=4094"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https://api.w.org/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 4087,
        "date": "2018-01-19T13:34:40",
        "date_gmt": "2018-01-19T18:34:40",
        "guid": {
            "rendered": "http://wesbos.com/?p=4087"
        },
        "modified": "2018-01-25T16:48:38",
        "modified_gmt": "2018-01-25T21:48:38",
        "slug": "announcing-my-css-grid-course",
        "status": "publish",
        "type": "post",
        "link": "https://wesbos.com/announcing-my-css-grid-course/",
        "title": {
            "rendered": "Announcing my CSS Grid Course"
        },
        "content": {
            "rendered": "<p><img class=\"size-large wp-image-4088\" src=\"https://wesbos.com/wp-content/uploads/2018/01/GRID-social-share-650x366.png\" alt=\"\" width=\"640\" height=\"360\" srcset=\"https://wesbos.com/wp-content/uploads/2018/01/GRID-social-share-650x366.png 650w, https://wesbos.com/wp-content/uploads/2018/01/GRID-social-share-300x169.png 300w, https://wesbos.com/wp-content/uploads/2018/01/GRID-social-share-768x432.png 768w\" sizes=\"(max-width: 640px) 100vw, 640px\" /><br />\nIt&#8217;s Here! The past few months I&#8217;ve been working hard on my latest course on CSS Grid, and today I&#8217;m happy to announce it&#8217;s available!</p>\n<p>CSS Grid is a brand new layout system in CSS and it will blow your mind! It&#8217;s not a framework or library &#8211; it&#8217;s part of CSS and is going to totally change the way we build layouts for the better.</p>\n<p>The course is 25 videos, about 4 hours long and 100% free.</p>\n<p>We start off with the fundamentals of CSS Grid and finish off with a number of real-world coding examples. If you are convinced already, grab it at <a href=\"https://CSSGrid.io\">CSSGrid.io</a>.</p>\n<h3>Thanks To Firefox!</h3>\n<p>A huge thanks to Firefox who has sponsored my time to create this course and offer it up for free — they are the reason I&#8217;m able to offer this course up without any cost.</p>\n<p>Firefox packs some of the best dev tools and in particular their CSS Grid Dev tools make understanding, debugging and visualizing complex grid layouts a snap.</p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>It&#8217;s Here! The past few months I&#8217;ve been working hard on my latest course on CSS Grid, and today I&#8217;m happy to announce it&#8217;s available! CSS Grid is a brand new layout system in CSS and it will blow your &hellip; <a href=\"https://wesbos.com/announcing-my-css-grid-course/\">Continue reading <span class=\"meta-nav\">&rarr;</span></a></p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 4088,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            39
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https://wesbos.com/wp-json/wp/v2/posts/4087"
                }
            ],
            "collection": [
                {
                    "href": "https://wesbos.com/wp-json/wp/v2/posts"
                }
            ],
            "about": [
                {
                    "href": "https://wesbos.com/wp-json/wp/v2/types/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https://wesbos.com/wp-json/wp/v2/users/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https://wesbos.com/wp-json/wp/v2/comments?post=4087"
                }
            ],
            "version-history": [
                {
                    "href": "https://wesbos.com/wp-json/wp/v2/posts/4087/revisions"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https://wesbos.com/wp-json/wp/v2/media/4088"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https://wesbos.com/wp-json/wp/v2/media?parent=4087"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https://wesbos.com/wp-json/wp/v2/categories?post=4087"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https://wesbos.com/wp-json/wp/v2/tags?post=4087"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https://api.w.org/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 4033,
        "date": "2017-05-10T10:24:23",
        "date_gmt": "2017-05-10T14:24:23",
        "guid": {
            "rendered": "http://wesbos.com/?p=4033"
        },
        "modified": "2018-01-25T16:50:38",
        "modified_gmt": "2018-01-25T21:50:38",
        "slug": "learn-node",
        "status": "publish",
        "type": "post",
        "link": "https://wesbos.com/learn-node/",
        "title": {
            "rendered": "Announcing Learn Node!"
        },
        "content": {
            "rendered": "<p>It&#8217;s finally here! I&#8217;m super excited to announce my latest course &#8211; <a href=\"https://LearnNode.com?utm_source=wesboscom&amp;utm_medium=blog&amp;utm_campaign=launchpost\">Learn Node</a>.</p>\n<p><a href=\"https://LearnNode.com?utm_source=wesboscom&amp;utm_medium=blog&amp;utm_campaign=launchpost\"><img src=\"https://getdrip.s3.amazonaws.com/uploads/image_upload/image/69572/embeddable_25262a7f-5471-4dbb-8e88-c4d64a41f218.jpg\" alt=\"Image\" /></a></p>\n<p>The last 5 months of my life have been spent creating this server side course and it&#8217;s honestly <em>one of the best things I&#8217;ve ever made</em>. I know a lot of you have been waiting patiently (and some not so patiently 😂) so grab it now at the launch price over at <a href=\"https://LearnNode.com?utm_source=wesboscom&amp;utm_medium=blog&amp;utm_campaign=launchpost\">LearnNode.com</a></p>\n<p>Learn Node is my latest premium training course in which we learn to build full stack web apps with Node.js, Express, MongoDB, Passport JS and a few other friends. This is an extremely in depth course that covers everything from the core concepts to user accounts and authentication to image uploading + resizing and all the way through to deploying live to the web.</p>\n<p>If you want to up your JavaScript game and further your career while having fun building an application in Node.js, this course is you for.</p>\n<h2>Now That&#8217;s Delicious!</h2>\n<p><img src=\"https://getdrip.s3.amazonaws.com/uploads/image_upload/image/69574/f9c4858c-c7da-4fcd-9336-2007421bc4cb.gif\" alt=\"Image\" /></p>\n<p>Together we will build <strong>&#8220;Now That&#8217;s Delicious!&#8221;</strong>, a full stack restaurant application which users can search, geolocate, review and curate their favourite restaurants from around the world.</p>\n<p>The application has three main models — <strong>Users, Stores and Reviews</strong> — all of which are relational. It is designed to hit upon many of today&#8217;s application needs such as user authentication, database storage, Ajax REST API, file upload and image resizing.</p>\n<p>I&#8217;ve also added a bunch of new team licenses and snazzy new dashboard for distributing licenses. Forward this email to your boss and let them know they should grab it now.</p>\n<h2>Can you help?</h2>\n<p>It&#8217;s been 10 months since I&#8217;ve launched a paid course (ES6 for Everyone) and about that long since I went full time on creating free + premium courses.</p>\n<p>With this now being my primary income, it would mean the world to me if you could share my Learn Node course with a friend, co-worker or slack room.</p>\n<p><a href=\"https://twitter.com/home?status=Learn%20Node%20is%20a%20new%20course%20from%20%40wesbos%20on%20Node.js,%20Express,%20MongoDB%20and%20friends.%20Check%20it%20out!%20%E2%86%92%20https%3A//LearnNode.com\">Tweet </a>, <a href=\"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2FLearnNode.com\">Facebook Share</a> or send a friend to LearnNode.com</p>\n<p><strong>Thank you and enjoy the course — see you on slack!</strong></p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>It&#8217;s finally here! I&#8217;m super excited to announce my latest course &#8211; Learn Node. The last 5 months of my life have been spent creating this server side course and it&#8217;s honestly one of the best things I&#8217;ve ever made. &hellip; <a href=\"https://wesbos.com/learn-node/\">Continue reading <span class=\"meta-nav\">&rarr;</span></a></p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 4034,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            44,
            59,
            49,
            60
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https://wesbos.com/wp-json/wp/v2/posts/4033"
                }
            ],
            "collection": [
                {
                    "href": "https://wesbos.com/wp-json/wp/v2/posts"
                }
            ],
            "about": [
                {
                    "href": "https://wesbos.com/wp-json/wp/v2/types/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https://wesbos.com/wp-json/wp/v2/users/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https://wesbos.com/wp-json/wp/v2/comments?post=4033"
                }
            ],
            "version-history": [
                {
                    "href": "https://wesbos.com/wp-json/wp/v2/posts/4033/revisions"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https://wesbos.com/wp-json/wp/v2/media/4034"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https://wesbos.com/wp-json/wp/v2/media?parent=4033"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https://wesbos.com/wp-json/wp/v2/categories?post=4033"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https://wesbos.com/wp-json/wp/v2/tags?post=4033"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https://api.w.org/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 3996,
        "date": "2017-02-27T11:47:51",
        "date_gmt": "2017-02-27T16:47:51",
        "guid": {
            "rendered": "http://wesbos.com/?p=3996"
        },
        "modified": "2018-02-02T15:36:51",
        "modified_gmt": "2018-02-02T20:36:51",
        "slug": "breakout-email",
        "status": "publish",
        "type": "post",
        "link": "https://wesbos.com/breakout-email/",
        "title": {
            "rendered": "The Breakout Email Management System"
        },
        "content": {
            "rendered": "<p><img src=\"https://wesbos.com/wp-content/uploads/2017/02/breakout.jpg\" alt=\"\" /></p>\n<h1>The Breakout Email Management System</h1>\n<p>An email management system for overwhelmed creatives who want to get back to work.</p>\n<p>This is a collection of my thoughts over the last year of trying to solve my email overload problem. I&#8217;ve certainly not fixed my email problem &#8211; you might be reading this while you wait for a reply from me 😂. The key here is that my stress from email has significantly dropped after implementing these techniques.</p>\n<p>The Breakout system is about going deep to the root of email overload and fixing communication problems at their source. It&#8217;s about putting in place the processes and forming the habits that will fix your email overload and free up your time to focus on your work and flourish creatively.</p>\n<p>While tools are an important part of Breakout, they aren&#8217;t the focus. No tool, email client or iPhone app is going to save you if you can&#8217;t first break through to the underlying issues at hand &#8211; why do you get so much email in the first place, and why are you so bad at dealing with it?</p>\n<h2>Decide</h2>\n<p>The core of breakout is that you likely don&#8217;t have an email problem, but a <em>decision problem</em>. It&#8217;s human nature to avoid having to make decisions or to defer to a better time &#8211; a time when you think you can make a better choice, a time when you are less busy, any time but now.</p>\n<p>You have hundreds of emails sitting in your inbox that need a decision from you. You open them, read it, and close it down. &quot;I&#8217;ll deal with that later&quot;.</p>\n<p>Soon this piles up and becomes a back and forth of &quot;Sorry for the late reply&#8230;&quot; emails.</p>\n<p>When you open an email, you need to decide immediately how to deal with it and get it out of your inbox. The rest of these steps are going to provide a few different ways to deal with your emails so that you can get it off your plate and get back to work.</p>\n<h2>Kill it at the Source</h2>\n<p>Whenever an email comes into your inbox, ask yourself &quot;Can I stop getting this type of email? Why am I receiving it? How can I not get this email in the future?&quot;.</p>\n<p>Do customers keep requesting amendments to their receipt?  Build something so they can do it themselves!</p>\n<p>Are you receiving questions about a product or service that you provide? You are probably doing a poor job communicating on your website. That is an opportunity to fix and clarify your website&#8217;s copy. If you get the same email more than three times, stop and fix it at the source because something is broken and your email is just the dumping ground for the broken glass.</p>\n<h2>Your inbox isn&#8217;t the world&#8217;s todo list</h2>\n<p>Your inbox is not a todo application and you should not treat it as one. If an email contains a task that you must do, transfer it out of your inbox into a proper todo application or project management tool.</p>\n<p>This follows David Allen&#8217;s <em>Getting Things Done</em> fairly closely. The mantra is get it out of your head and into the system. The same goes for tasks in your inbox &#8211; if you get them out of your inbox and properly categorized into your todo application, you both lighten your cognitive load and ensure that you will not forget about this task.</p>\n<p>I personally keep a todo application with &quot;areas of focus&quot; &#8211; each area could be a specific project, a list of things to do around the house, little tweaks I need to make on a site, or links I should tweet. Then at the beginning of every day or so, I&#8217;ll review these areas and pull a few tasks into my &quot;today&quot; — these are the things and the order in which I will complete them.</p>\n<p>My GTD workflow goes a little beyond the scope of email, but this is exactly how I deal with tasks that show up in my inbox. I&#8217;ll try and deal with tasks right away, but if I am unable, I&#8217;ll stick both that task and any relevant information, including the link to the original email into an area of focus.</p>\n<p>Clear inbox, clear mind. Get back to making things.</p>\n<h2>Filter</h2>\n<p>Newsletters and transactional email add visual clutter to your inbox. Trim down notifications from applications by turning them off or creating a filter where you can cleanly sweep them all from your inbox.</p>\n<p>Here is an example of a filter and tag I use so I can delete everything at once.</p>\n<p>Matches: from:(notifications@basecamp.com OR no-reply@slack.com OR notifications@github.com OR noreply@github.com OR do-not-reply@trello.com OR member@paypal.ca OR service@intl.paypal.com OR *@asana.com OR noreply@md.getsentry.com OR calendar-notification@google.com OR emailnotification@interealty.net OR noreply@youtube.com)</p>\n<p>Another one to filter out of office replies from long chains or email blasts in every single language. This is pretty specific to my own use case, but you get the idea. Figure out what works for you and implement it.</p>\n<p>Matches: (&quot;Automatische Antwort&quot; OR &quot;Automatic reply&quot; OR &quot;AutoReply&quot; OR &quot;Out of Office&quot; OR &quot;Xesc Duran&quot; OR &quot;Abwesend&quot; OR &quot;Absence&quot; OR &quot;Absence du bureau&quot; OR &quot;À l&#8217;extérieur du bureau&quot; OR &quot;Réponse automatique&quot; OR &quot;Abwesenheitsnotiz&quot; OR &quot;Resposta automática&quot; OR &quot;Automaattinen vastaus&quot; OR &quot;Automatisch antwoord&quot; OR &quot;Afwezig&quot; OR &quot;Afwezigheid&quot; OR &quot;Niet aanwezig&quot; OR &quot;Poza zasięgiem&quot; OR &quot;Na wakacjach&quot; OR &quot;Poza biurem&quot; OR &quot;Automatyczna odpowiedź&quot; OR &quot;Z dala od komputera&quot; OR &quot;Αυτόματη απάντηση&quot; OR &quot;Εκτός γραφείου&quot; OR &quot;na dovolenké&quot; OR &quot;mimo kancelárie&quot; OR &quot;automatická odpověď&quot; OR &quot;Autosvar&quot; OR &quot;Fora do escritório&quot; OR &quot;na dovolené&quot; OR &quot;mimo kancelář&quot;)</p>\n<h2>co-workers, clients and newsletters</h2>\n<p>co-workers and clients who email with problems and questions can be trained.  Email likely isn&#8217;t the best spot &#8211; tickets can be created in bug trackers, responses and file uploads can be logged in project management software.</p>\n<p>Aggressively unsubscribe from newsletters that mean very little to you. These are just adding noise to your inbox. If something worthwhile is happening, you&#8217;ll hear about. Gmail tabs does a great job at filtering things into their own tabs.</p>\n<h2>Automate &amp; Expand</h2>\n<p>Tech support should be directed to our slack channel. Obscure programming questions get sent to stack overflow. Questions about my text editor, theme or what type of toilet paper I use get sent to <a href=\"https://wesbos.com/uses\">wesbos.com/uses</a>. Advice and &quot;please motivate me&quot; requests get sent to my <a href=\"https://github.com/wesbos/ama\">AMA</a>.</p>\n<p>All of these redirects can seem brash and cold &#8211; I don&#8217;t like that part of it. So &#8211; I&#8217;ll use Text Expander for common emails &#8211; it helps me seem more human.</p>\n<p>One reason we abandon emails in our inbox is that we simply don&#8217;t have the time it takes to write a meaningful or empathetic email back to someone. A short, terse response may come off worse than no response at all.</p>\n<p>So, how does a busy person instill empathy into our emails? How do we give people the time of day when we really don&#8217;t have it for ourselves? For me, many of my emails start off with a nice text expander base.</p>\n<p>Text Expander will auto populate common things like the sender&#8217;s name, a random greeting and the base for the email. From there I can take 30 seconds to personalize the email a little more and answer any questions that the snippet didn&#8217;t cover.</p>\n<p>For me it&#8217;s not so much that Text Expander cuts down on typing, it&#8217;s the fact that it cuts down on thinking how to reply to an email.</p>\n<h2>Keep Commonly used info at your fingertips</h2>\n<p>I&#8217;ll also keep things like phone numbers, airline mile numbers, house addresses, postal codes and any other commonly asked for info in snippets. It&#8217;s a quick way to bring up info you forget, or hate to type over and over.</p>\n<p>For sensitive information like banking details, I keep them just a password away in LastPass so I can quickly copy/paste.</p>\n<h2>Dictate it!</h2>\n<p>I&#8217;m at the spot where I can think and speak much faster than I can type. Recently voice dictation, or speech-to-text, has gotten really good and we are now able to just speak our thoughts and have the computer type them up for us.</p>\n<p><img src=\"http://wes.io/jKS5/content\" alt=\"\" /></p>\n<p>For an email that is an easy response but requires 3 or 4 paragraphs — &quot;What do you think of ____&quot; &#8211; I&#8217;ll usually turn on dictation and speak my response. Every few sentences I&#8217;ll pause and fix any errors and keep going. An added benefit to this is that your emails come off more casual and conversational.</p>\n<p>The biggest barrier to this is that it&#8217;s uncomfortable or weird to do when people around. I don&#8217;t have a solution for you other than that you should get over that, because if you were talking into a phone it would be totally normal for you.</p>\n<h2>Use Video Responses</h2>\n<p>The breakout email system is not just about the email that you receive, it&#8217;s also about the email that you send out. How do we send out quality replies while not burning up our day?</p>\n<p>While rare, sometimes an email contains a list of questions that text isn&#8217;t a good medium for. Rather than try and respond to each one at a time, I&#8217;ll just flip on my camera and talk through them to the camera. This allows me to both respond faster, and more importantly to deliver my free thoughts along with the tone that I intended.</p>\n<p>This is also really helpful when trying to resolve a problem or provide feedback on a visual design, flip on a screen recorder and show the problem in 20 seconds rather than 5 minutes of email no one will bother to read.<br />\nI use <a href=\"http://my.cl.ly/r/0O0c442O0w1Z0n3W\">Cloudapp</a> in my OSX menu bar as it&#8217;s really fast and there is no exporting step &#8211; it&#8217;s like screenshots for video .</p>\n<h2>Should you Defer?</h2>\n<p>Deferring email should be a last resort. If you need to reply to an email but you are waiting on another party, defer it. This means you clear it out of your inbox and have it come back at another time. Boomerang and inbox for Gmail do this.</p>\n<p>I&#8217;m not crazy about getting to inbox zero, but I do find if I defer things too long, they get lost in my inbox.</p>\n<h2>Batch Process</h2>\n<p>Many people recommend closing their email and only opening it up a few times. While this is ideal, many of us aren&#8217;t able to have that level of absenteeism.</p>\n<p>For me, I have my email open all day long, but I only batch process it once or twice per day. This allows me to quickly jump on important and time sensitive emails quickly, but leave everything else for a couple times a day.</p>\n<p>I use the Gmail labs extension <code>send and archive</code> so emails are out of my inbox as soon as I reply. Then I use <code>auto advance</code> so it puts another email on my plate as soon as that last one is sent &#8211; there isn&#8217;t a chance to escape when it drops another email on your lap!</p>\n<p><img src=\"http://wes.io/jKVG/content\" alt=\"\" /></p>\n<p>Remember that your job is likely not to reply to email — focus on doing your job and don&#8217;t worry about those emails building up in your inbox.</p>\n<h2>Stop Emailing Yourself</h2>\n<p>I often see people emailing themselves things because they don&#8217;t want to forget it. They often congregate with tab monsters who have 10,000 articles they want to read open in idle tabs.</p>\n<p>Stop emailing things to yourself. There are unlimited number of solutions to fix whatever it is that you are trying to move or remember.</p>\n<ul>\n<li>TODO items go in your todo app</li>\n<li>Phone numbers and emails go in your address book</li>\n<li>Reminders go in your calendar with an alert</li>\n<li>Bookmarks go in your browser, Evernote or Pinterest.</li>\n<li>Files go in Dropbox, Google Drive or Air drop.</li>\n</ul>\n<h2>That&#8217;s it</h2>\n<p>Try and implement this stuff &#8211; you&#8217;ll have to work at it but I bet it will help you out.</p>\n<p>Comment below if you have thoughts or ideas on your own workflow.</p>\n<p>If you found a spelling mistake you can correct it <a href=\"https://github.com/wesbos/es6-articles/blob/master/breakout-email.md\">here</a>.</p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The Breakout Email Management System An email management system for overwhelmed creatives who want to get back to work. This is a collection of my thoughts over the last year of trying to solve my email overload problem. I&#8217;ve certainly &hellip; <a href=\"https://wesbos.com/breakout-email/\">Continue reading <span class=\"meta-nav\">&rarr;</span></a></p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 3995,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            57
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https://wesbos.com/wp-json/wp/v2/posts/3996"
                }
            ],
            "collection": [
                {
                    "href": "https://wesbos.com/wp-json/wp/v2/posts"
                }
            ],
            "about": [
                {
                    "href": "https://wesbos.com/wp-json/wp/v2/types/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https://wesbos.com/wp-json/wp/v2/users/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https://wesbos.com/wp-json/wp/v2/comments?post=3996"
                }
            ],
            "version-history": [
                {
                    "href": "https://wesbos.com/wp-json/wp/v2/posts/3996/revisions"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https://wesbos.com/wp-json/wp/v2/media/3995"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https://wesbos.com/wp-json/wp/v2/media?parent=3996"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https://wesbos.com/wp-json/wp/v2/categories?post=3996"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https://wesbos.com/wp-json/wp/v2/tags?post=3996"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https://api.w.org/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 3975,
        "date": "2016-12-14T10:33:18",
        "date_gmt": "2016-12-14T15:33:18",
        "guid": {
            "rendered": "http://wesbos.com/?p=3975"
        },
        "modified": "2016-12-14T10:35:07",
        "modified_gmt": "2016-12-14T15:35:07",
        "slug": "javascript30",
        "status": "publish",
        "type": "post",
        "link": "https://wesbos.com/javascript30/",
        "title": {
            "rendered": "Announcing JavaScript30 — A Free 30 day Vanilla JS Coding Challenge"
        },
        "content": {
            "rendered": "<p><a href=\"https://JavaScript30.com\"><img src=\"https://wesbos.com/wp-content/uploads/2016/12/JS3-social-share.png\" alt=\"js3-social-share\" /></a></p>\n<p>You have probably heard on <a href=\"https://twitter.com/wesbos\">Twitter</a> or got an email from me. I just launched JavaScript30 &#8211; my latest free course. It has absolutely blown up &#8211; over 45,000 people have signed up in less than a week and the feedback has been overwhelmingly positive.</p>\n<p>So, you&#8217;ve done a few courses and read a few books but still don&#8217;t feel great about your relationship with JavaScript.</p>\n<p>How do you get better?</p>\n<p>Build things. Lots of things. Build 1,000 things. Keep it up and don&#8217;t stop. Seriously.</p>\n<p>This has always been my advice. Just put in the work and you will get better.</p>\n<p>But Wes, what should I build? I have no ideas! Please don&#8217;t make me do another todo app.</p>\n<p>Ideas, Eh? I&#8217;ve got lots! This is <a href=\"https://JavaScript30.com\">JavaScript30</a> — let&#8217;s build 30 things together.</p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>You have probably heard on Twitter or got an email from me. I just launched JavaScript30 &#8211; my latest free course. It has absolutely blown up &#8211; over 45,000 people have signed up in less than a week and the &hellip; <a href=\"https://wesbos.com/javascript30/\">Continue reading <span class=\"meta-nav\">&rarr;</span></a></p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 3976,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            44
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https://wesbos.com/wp-json/wp/v2/posts/3975"
                }
            ],
            "collection": [
                {
                    "href": "https://wesbos.com/wp-json/wp/v2/posts"
                }
            ],
            "about": [
                {
                    "href": "https://wesbos.com/wp-json/wp/v2/types/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https://wesbos.com/wp-json/wp/v2/users/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https://wesbos.com/wp-json/wp/v2/comments?post=3975"
                }
            ],
            "version-history": [
                {
                    "href": "https://wesbos.com/wp-json/wp/v2/posts/3975/revisions"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https://wesbos.com/wp-json/wp/v2/media/3976"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https://wesbos.com/wp-json/wp/v2/media?parent=3975"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https://wesbos.com/wp-json/wp/v2/categories?post=3975"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https://wesbos.com/wp-json/wp/v2/tags?post=3975"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https://api.w.org/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 3925,
        "date": "2016-11-15T08:24:27",
        "date_gmt": "2016-11-15T13:24:27",
        "guid": {
            "rendered": "http://wesbos.com/?p=3925"
        },
        "modified": "2018-04-03T10:33:47",
        "modified_gmt": "2018-04-03T14:33:47",
        "slug": "destructuring-objects",
        "status": "publish",
        "type": "post",
        "link": "https://wesbos.com/destructuring-objects/",
        "title": {
            "rendered": "A Dead Simple intro to Destructuring JavaScript Objects"
        },
        "content": {
            "rendered": "<p>Destructuring is a huge part of ES6. If you want to learn all about the different parts of destructuring check out my <a href=\"https://ES6.io\">ES6.io</a> video tutorials or read some of the <a href=\"http://wesbos.com/destructuring-default-values/\">other articles</a> on <a href=\"http://wesbos.com/destructuring-renaming/\">this blog</a>. This post is a dead simple introduction to what destructuring actually is .</p>\n<p>Along with arrow functions, let, and const, <strong>destructuring</strong> is probably something you&#8217;re going to be using every single day. I find it to be extremely useful whether I&#8217;m writing client side or Node.</p>\n<p>What does destructuring mean? It&#8217;s a JavaScript expression that allows us to extract data from arrays, objects, maps and sets — which we&#8217;re going to learn more about in a future <a href=\"https://ES6.io\">ES6.io</a> video —into their own variable. It allows us to extract properties from an object or items from an array, multiple at a time.</p>\n<p>Let&#8217;s take a look at what problem JavaScript destructuring really solves. Sometimes you need top level variables like so:</p>\n<pre><code class=\"language-js\">const person = {\n  first: 'Wes',\n  last: 'Bos',\n  country: 'Canada',\n  city: 'Hamilton',\n  twitter: '@wesbos'\n};\nconst first = person.first;\nconst last = person.last;</code></pre>\n<p>You get the point. You&#8217;ve got this pretty much repetitive code over and over again, where you need to make a variable from something that is inside of an object or inside of an array. What we could do instead of creating multiple variables, we destructure them in a single line like so:</p>\n<pre><code>const { first, last } = person;</code></pre>\n<p>Curly bracket on the left of the equals sign?! That is not a block. That is not an object. It&#8217;s the new destructuring syntax.</p>\n<p>The above code says, give me a variable called <strong>first</strong>, a variable called <strong>last</strong>, and take it from the <code>person</code> object. We&#8217;re taking the <code>first</code> property and the <code>last</code> property and putting them into two new variables that will be scoped to the parent block (or window!).</p>\n<pre><code class=\"language-js\">console.log(first); // Wes\nconsole.log(last); // Bos</code></pre>\n<p>Similarly, if I also wanted twitter, I would just add twitter into that, and I would get a third top level variable inside of my actual scope <code>const { first, last, twitter } = person;</code></p>\n<p>That&#8217;s really handy in many use cases. This is just one nested level, but for example, in React.js often you want to use destructuring because the data is so deeply nested in props or state.</p>\n<p>Let&#8217;s say we have some deeply nested data like we might get back from a JSON api:</p>\n<pre><code class=\"language-js\">const wes = {\n  first: 'Wes',\n  last: 'Bos',\n  links: {\n    social: {\n      twitter: 'https://twitter.com/wesbos',\n      facebook: 'https://facebook.com/wesbos.developer',\n    },\n    web: {\n      blog: 'https://wesbos.com'\n    }\n  }\n};</code></pre>\n<p>I want to be able to pull out <strong>Twitter</strong> and <strong>Facebook</strong> URLs here. I could do this like it&#8217;s 1994 and we&#8217;re all running around with walkmans:</p>\n<pre><code class=\"language-js\">const twitter = wes.links.social.twitter;\nconst facebook = wes.links.social.facebook;\n// Annoying!</code></pre>\n<p>We can use destructuring to do it one better!</p>\n<pre><code class=\"language-js\">const { twitter, facebook } = wes.links.social;\nconsole.log(twitter, facebook); // logs the 2 variables </code></pre>\n<p>Notice how we destructure <code>wes.links.social</code> and not just <code>wes</code>? That is important because we are destructuring a few levels deep.</p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Destructuring is a huge part of ES6. If you want to learn all about the different parts of destructuring check out my ES6.io video tutorials or read some of the other articles on this blog. This post is a dead &hellip; <a href=\"https://wesbos.com/destructuring-objects/\">Continue reading <span class=\"meta-nav\">&rarr;</span></a></p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 4111,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            63,
            44
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https://wesbos.com/wp-json/wp/v2/posts/3925"
                }
            ],
            "collection": [
                {
                    "href": "https://wesbos.com/wp-json/wp/v2/posts"
                }
            ],
            "about": [
                {
                    "href": "https://wesbos.com/wp-json/wp/v2/types/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https://wesbos.com/wp-json/wp/v2/users/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https://wesbos.com/wp-json/wp/v2/comments?post=3925"
                }
            ],
            "version-history": [
                {
                    "href": "https://wesbos.com/wp-json/wp/v2/posts/3925/revisions"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https://wesbos.com/wp-json/wp/v2/media/4111"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https://wesbos.com/wp-json/wp/v2/media?parent=3925"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https://wesbos.com/wp-json/wp/v2/categories?post=3925"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https://wesbos.com/wp-json/wp/v2/tags?post=3925"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https://api.w.org/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 3931,
        "date": "2016-11-15T08:19:18",
        "date_gmt": "2016-11-15T13:19:18",
        "guid": {
            "rendered": "http://wesbos.com/?p=3931"
        },
        "modified": "2018-02-02T15:36:52",
        "modified_gmt": "2018-02-02T20:36:52",
        "slug": "destructuring-renaming",
        "status": "publish",
        "type": "post",
        "link": "https://wesbos.com/destructuring-renaming/",
        "title": {
            "rendered": "Rename &amp; Destructure Variables in ES6"
        },
        "content": {
            "rendered": "<p>Last post we took a look at <a href=\"http://wesbos.com/destructuring-objects/\">an intro to destructuring</a>. Let&#8217;s take a look at another use case which would be renaming your variables. Sometimes data comes back in some odd names, and you might not necessarily want to use a property key as the end variable name. Maybe you don&#8217;t like that variable name or it&#8217;s already taken in your scope.</p>\n<pre><code class=\"language-js\">const twitter = 'twitter.com';\nconst wes = {\n  first: 'Wes',\n  last: 'Bos',\n  links: {\n    social: {\n      twitter: 'https://twitter.com/wesbos',\n      facebook: 'https://facebook.com/wesbos.developer',\n    },\n    web: {\n      blog: 'https://wesbos.com'\n    }\n  }\n};</code></pre>\n<p>For example here, I already used twitter as a variable. I can&#8217;t use it again, but I&#8217;m stuck, because this object gives me twitter as a key and this object gives me twitter as a key. What you can do is you can rename them as you destructure them.</p>\n<p>So &#8211; I want the <code>twitter</code> property, but I want to call it <code>tweet</code>. I want the <code>facebook</code> property, but I want to call it <code>fb</code>.</p>\n<pre><code>const { twitter: tweet, facebook: fb } = wes.links.social;</code></pre>\n<p>The above code will pull the <code>wes.links.social.twitter</code> into a variable called <code>tweet</code> and similarly for <code>facebook</code>.</p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Last post we took a look at an intro to destructuring. Let&#8217;s take a look at another use case which would be renaming your variables. Sometimes data comes back in some odd names, and you might not necessarily want to &hellip; <a href=\"https://wesbos.com/destructuring-renaming/\">Continue reading <span class=\"meta-nav\">&rarr;</span></a></p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 3971,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            63,
            44
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https://wesbos.com/wp-json/wp/v2/posts/3931"
                }
            ],
            "collection": [
                {
                    "href": "https://wesbos.com/wp-json/wp/v2/posts"
                }
            ],
            "about": [
                {
                    "href": "https://wesbos.com/wp-json/wp/v2/types/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https://wesbos.com/wp-json/wp/v2/users/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https://wesbos.com/wp-json/wp/v2/comments?post=3931"
                }
            ],
            "version-history": [
                {
                    "href": "https://wesbos.com/wp-json/wp/v2/posts/3931/revisions"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https://wesbos.com/wp-json/wp/v2/media/3971"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https://wesbos.com/wp-json/wp/v2/media?parent=3931"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https://wesbos.com/wp-json/wp/v2/categories?post=3931"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https://wesbos.com/wp-json/wp/v2/tags?post=3931"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https://api.w.org/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 3934,
        "date": "2016-11-15T03:22:43",
        "date_gmt": "2016-11-15T08:22:43",
        "guid": {
            "rendered": "http://wesbos.com/?p=3934"
        },
        "modified": "2018-02-02T15:36:53",
        "modified_gmt": "2018-02-02T20:36:53",
        "slug": "destructuring-default-values",
        "status": "publish",
        "type": "post",
        "link": "https://wesbos.com/destructuring-default-values/",
        "title": {
            "rendered": "Setting Default Values with JavaScript&#8217;s Destructuring"
        },
        "content": {
            "rendered": "<p>There&#8217;s one last thing we need to know about destructuring objects, and that is the ability to set defaults. This one&#8217;s a little bit confusing, so bear with me here and we&#8217;re going to circle back for another example later on in a couple of videos over at <a href=\"https://ES6.io\">ES6.io</a>.</p>\n<p>When you destructure an object, what happens if that value isn&#8217;t there?</p>\n<pre><code class=\"language-js\">const settings = {\n    speed: 150\n}\nconst { speed, width } = settings; \nconsole.log(width);</code></pre>\n<p>What is width? It&#8217;s <code>undefined</code> because we create the variable, but it&#8217;s not able to be set to anything.</p>\n<p>With destructuring we can set defaults, or <em>fallback values</em> so that if an item is not in the object (or Array, Map, or Set) it will fall back to what you have set at the default.</p>\n<p>This syntax is a little hard to read:</p>\n<pre><code class=\"language-js\">const settings = {\n    speed: 150\n}\nconst { speed = 750, width = 500 } = settings;\nconsole.log(speed); // 150 - comes from settings object\nconsole.log(width); // 500 - fallback to default</code></pre>\n<p>Now if the <code>speed</code> or <code>width</code> properties don&#8217;t exist on our <code>settings</code> object, they fallback to <code>750</code> and <code>500</code> respectively.</p>\n<h2>Careful: null and undefined</h2>\n<p>One thing to note here is that this isn&#8217;t 100% the same as this old trick used to fallback when <code>settings.speed</code> is not set:</p>\n<pre><code class=\"language-js\">const mySpeed = 0;\nconst speed = mySpeed || 760; \nconsole.log(speed); // 760!</code></pre>\n<p>Why? Because ES6 destructuring default values only kick in if the value is undefined. null, false and 0 are all still values!</p>\n<pre><code class=\"language-js\">const { dogName = 'snickers' } = { dogName: undefined }\nconsole.log(dogName) // what will it be? 'snickers'!\n\nconst { dogName = 'snickers' } = { dogName: null }\nconsole.log(dogName) // what will it be? null!\n\nconst { dogName = 'snickers' } = { dogName: false }\nconsole.log(dogName) // what will it be? false!\n\nconst { dogName = 'snickers' } = { dogName: 0 }\nconsole.log(dogName) // what will it be? 0!</code></pre>\n<h3>Combining with Destructuring Renaming</h3>\n<p>In my last post we learned that we can destrucutre and rename varaibles at the same time with something like this:</p>\n<pre><code class=\"language-js\">const person = {\n  first: 'Wes',\n  last: 'Bos',\n};\n\nconst { first: firstName } = person;\nconsole.log(firstName); // Wes</code></pre>\n<p>We can also set defaults in the same go. Hold onto your head because this syntax is going to get funky!</p>\n<pre><code class=\"language-js\">const person = { first: 'Wes', last: 'Bos' };\nconst { middle: middleName = 'Super Rad' } = person;\nconsole.log(middleName); // 'Super Rad'</code></pre>\n<p>Woah &#8211; let&#8217;s step through that one!</p>\n<ol>\n<li>First we create a new const var called <code>middleName</code>.</li>\n<li>Next we look for <code>person.middle</code>. If there was a <code>person.middle</code> property, it would be put into the <code>middleName</code> variable.</li>\n<li>There isn&#8217;t a <code>middle</code> property on our <code>person</code> object, so we fall back to the default of <code>Super Rad</code>. </li>\n</ol>\n<p>Cool! Make sure to check out <a href=\"https://ES6.io\">ES6.io</a> for more like this!</p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>There&#8217;s one last thing we need to know about destructuring objects, and that is the ability to set defaults. This one&#8217;s a little bit confusing, so bear with me here and we&#8217;re going to circle back for another example later &hellip; <a href=\"https://wesbos.com/destructuring-default-values/\">Continue reading <span class=\"meta-nav\">&rarr;</span></a></p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 3859,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            63,
            44
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https://wesbos.com/wp-json/wp/v2/posts/3934"
                }
            ],
            "collection": [
                {
                    "href": "https://wesbos.com/wp-json/wp/v2/posts"
                }
            ],
            "about": [
                {
                    "href": "https://wesbos.com/wp-json/wp/v2/types/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https://wesbos.com/wp-json/wp/v2/users/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https://wesbos.com/wp-json/wp/v2/comments?post=3934"
                }
            ],
            "version-history": [
                {
                    "href": "https://wesbos.com/wp-json/wp/v2/posts/3934/revisions"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https://wesbos.com/wp-json/wp/v2/media/3859"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https://wesbos.com/wp-json/wp/v2/media?parent=3934"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https://wesbos.com/wp-json/wp/v2/categories?post=3934"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https://wesbos.com/wp-json/wp/v2/tags?post=3934"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https://api.w.org/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 3917,
        "date": "2016-11-14T15:10:10",
        "date_gmt": "2016-11-14T20:10:10",
        "guid": {
            "rendered": "http://wesbos.com/?p=3917"
        },
        "modified": "2018-02-02T15:36:53",
        "modified_gmt": "2018-02-02T20:36:53",
        "slug": "new-es6-string-methods",
        "status": "publish",
        "type": "post",
        "link": "https://wesbos.com/new-es6-string-methods/",
        "title": {
            "rendered": "4 New String Methods in ES6 that you should know"
        },
        "content": {
            "rendered": "<p>The String type in ES6 has come with <strong>four new methods</strong> that are really handy, help us write a little bit more readable code, as well as reduce our reliance on using regular expressions, or RegExp, for certain things.</p>\n<h3>.startsWith() and .endsWith()</h3>\n<p>So I have a <code>const</code> variable named <code>course</code>, which has the value of <code>RFB1</code>, this stands for React for Beginners.</p>\n<pre><code>const course = 'RFB1';</code></pre>\n<p>Sometimes I have <code>RFB1</code> which is the starter package, <code>RFB2</code> which is the master package, <code>RFB3</code> which is the team package. I don&#8217;t really care too much about that in certain cases, I just want to know if <code>course</code> starts with <code>RFB</code>, and not something like <code>STPU</code>, which is Sublime Text Power User or <code>ES6</code>, which is this series.</p>\n<p>Here, <code>RFB</code> means React for Beginners, I need to know if the string starts with it. We can use the console to check this out by typing <code>course.startsWith('RFB')</code>, it will return <code>true</code>, because obviously it does start with it.</p>\n<p>If I did <code>rfb</code>, in lowercase letters, it says, <code>false</code>, because there is no way to make this case insensitive. If you do need case sensitivity you must still use a Regular Expression.</p>\n<p>One other thing that <code>.startsWith()</code>  will do is it&#8217;ll allow you to skip a certain number of characters and start looking at a set point.</p>\n<pre><code>const flightNumber = '20-AC2018-jz';</code></pre>\n<p>This flight number here, I want to see if it starts with <code>AC</code>. Over in the console, I&#8217;m going to type <code>flightNumber.startsWith('AC')</code>. It&#8217;s false, because the variable starts with <code>20-</code>. This also happens if we have SKU numbers, and they start with a bunch of junk and then it gets to actually what we want.</p>\n<p>What you can do is you can use <code>flightNumber.startsWith('AC', 3);</code>, which says start after three characters. That is returning <code>true</code>, because it ignores the first three and then starts at AC and checks against that.</p>\n<p><code>EndsWith</code> works fairly similar. Here is an example where we have <code>jz</code> at the end of the <code>flightNumber</code>, and I want to know if it&#8217;s an Air Canada Jazz flight. We can say <code>flightNumber.endsWith('jz')</code>, which will be <code>true</code>, obviously, because it ends with it.</p>\n<p>There&#8217;s another option that we can pass <code>.endsWith()</code>, and I&#8217;m going to use an account number variable as an example here:</p>\n<pre><code>const accountNumber = '825242631RT0001';</code></pre>\n<p>In Canada we have business numbers that are nine digits long. They&#8217;re always nine digits long, and that is your actual business number.</p>\n<p>Then you have a tax number, which is RT0001, or RT0002. You also might have RP0001 for your first employee, RP0002 for your second employee, and so on. We also have RC for your corporate taxes. Often you need to know, is this number a tax number or is this number a corporate tax number, or is this a payroll number? Is it <strong>RC</strong>, or <strong>RP</strong>, or <strong>RT</strong>?</p>\n<p>I need to check if this number, which ends with RT, and I want to ignore this right here. What you can do is you can tell the account number to just take a certain number of characters, and ignore the rest.</p>\n<p>Just like with our <code>flightNumber</code>, we can use the console to put in <code>accountNumber.endsWith('RT')</code>, which will be false. What I can tell it, though, is only take the first 11 numbers, by using <code>accountNumber.endsWith('RT', 11);</code> which will be <code>true</code>.</p>\n<p>Essentially you&#8217;re just going to take the first 11 numbers of <code>accountNumber</code>, ignore the rest, and then see if it ends in RT or whatever else it might be.</p>\n<h3>.includes()</h3>\n<p>Then next up we have <code>.includes()</code> which will just check if that string is anywhere in it. If I wanted to see if my flight number includes the letters AC, then I could use <code>flightNumber.includes('AC')</code>, which is <code>true</code>.</p>\n<p>Again, it is not case sensitive so you cannot use lower case letters here.</p>\n<p><code>.includes()</code> checks to see if your string has something in it. As a bit of an aside, it was originally supposed to be called <code>.contains()</code>, but it got changed to includes because of some conflicts with the MooTool libraries and the way that they modified the prototype.</p>\n<h3>.repeat() and String Padding</h3>\n<p>Next up we have make, model and colour here:</p>\n<pre><code class=\"language-js\">const make = 'BMW';\nconst model = 'x5';\nconst colour = 'Royal Blue';</code></pre>\n<p>I&#8217;m going to show you where that would be useful for using <code>.repeat()</code>, which allows you to take a string, and repeat it. You can just call <code>.repeat()</code> and it&#8217;s going to repeat that string over and over and over again.</p>\n<p>Where is that useful? Sometimes we have some words here. I&#8217;m going to take my <code>BMW</code>, <code>x5</code> and <code>royal blue</code>, and if I wanted to display the variables in a terminal or something, but I want to right align them. How would that work? I&#8217;d have to just put a whole bunch of padding in, depending on how long this was and how much space will be used, kind of like this:</p>\n<pre><code class=\"language-js\">                 BMW\n                  x5\n          Royal Blue</code></pre>\n<p>What we can do, instead of hitting the space bar each time, we can use a left pad function, and you can use <code>.repeat()</code>to code a nice little left padding function.</p>\n<p>Here we can <code>return</code> a string, and we need to then pad it with however many characters we need. We&#8217;ll take a space and repeat it 10 times.</p>\n<pre><code class=\"language-js\">leftPad = function(str, length = 10){\n    return `${' '.repeat(length)}${str}`;\n}\n\nconsole.log(leftPad(make));   // '          BMW'\nconsole.log(leftPad(model));  // '          x5'\nconsole.log(leftPad(colour)); // '          Royal Blue'</code></pre>\n<p>However, if we want it right aligned, we&#8217;ll need to subtract however many characters are in the string, so we subtract <code>str.length</code> here before we return the actual string itself in <code>${str}</code>;</p>\n<pre><code class=\"language-js\">leftPad = function(str, length = 20){\n    return `${' '.repeat(Math.max(length - str.length,0))}${str}`;\n}</code></pre>\n<p>I can take make, model, and color, put them in here. It&#8217;s going to console.log each one of them out. I&#8217;m going to leave out the length because we&#8217;re going to default it to 20, and it should just pass in the make, model, and color.</p>\n<pre><code class=\"language-js\">console.log(leftPad(make));   // '                 BMW'\nconsole.log(leftPad(model));  // '                  x5'\nconsole.log(leftPad(colour)); // '          Royal Blue'</code></pre>\n<p>There we go. See how all these are perfectly right aligned? BMW X5 in royal blue, whereas all of this is however much padding we actually need. That&#8217;s a nice little use for repeat.</p>\n<h3>Very Important</h3>\n<p>Another little funny one that you can do is, we can take an ES6 template string, and inside of that let&#8217;s do a statement where we take a string and multiply it:</p>\n<pre><code>${'woof' * 5}</code></pre>\n<p>What happens when you take a string and multiply it by a number? You get <code>NaN</code>. Let&#8217;s call repeat on that 10 times, and then tack on &#8216;Batman!&#8217;.</p>\n<pre><code>`${'woof' * 5}`.repeat(10) + \" Batman!\";</code></pre>\n<p>Those are some four new functions. Put them in your back pocket, and hopefully you&#8217;ll get to use them soon!</p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The String type in ES6 has come with four new methods that are really handy, help us write a little bit more readable code, as well as reduce our reliance on using regular expressions, or RegExp, for certain things. .startsWith() &hellip; <a href=\"https://wesbos.com/new-es6-string-methods/\">Continue reading <span class=\"meta-nav\">&rarr;</span></a></p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 3918,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            63,
            44
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https://wesbos.com/wp-json/wp/v2/posts/3917"
                }
            ],
            "collection": [
                {
                    "href": "https://wesbos.com/wp-json/wp/v2/posts"
                }
            ],
            "about": [
                {
                    "href": "https://wesbos.com/wp-json/wp/v2/types/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https://wesbos.com/wp-json/wp/v2/users/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https://wesbos.com/wp-json/wp/v2/comments?post=3917"
                }
            ],
            "version-history": [
                {
                    "href": "https://wesbos.com/wp-json/wp/v2/posts/3917/revisions"
                }
            ],
            "wp:featuredmedia": [
                {
                    "embeddable": true,
                    "href": "https://wesbos.com/wp-json/wp/v2/media/3918"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https://wesbos.com/wp-json/wp/v2/media?parent=3917"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https://wesbos.com/wp-json/wp/v2/categories?post=3917"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https://wesbos.com/wp-json/wp/v2/tags?post=3917"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https://api.w.org/{rel}",
                    "templated": true
                }
            ]
        }
    }
]